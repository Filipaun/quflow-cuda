import numpy as np
import cupy as cp
import quflow as qf
import pytest
import quflow.laplacian.sparse as qusparse
import quflow.laplacian.direct as qudirect
import quflow.laplacian.tridiagonal as qutridiagonal


def get_random_omega_real(N=5):
    return np.random.randn(N**2)


def get_random_mat(N=5):
    W = np.random.randn(N, N) + 1j*np.random.randn(N, N)
    W -= W.conj().T
    W -= np.eye(N)*np.trace(W)/N
    return W


def get_smooth_mat(N=5):
    omegar = np.array([-1.94289029e-16,  9.34389008e-15,  1.68615122e-15, -1.59309186e-15,
                        4.18294664e-01,  5.04879629e-01,  2.05858273e-01, -6.60776951e-01,
                        6.78180820e-01, -1.01935097e-01,  2.47658404e-01,  4.13107476e-01,
                        7.95673082e-02, -1.03883724e+00, -4.76852974e-01, -6.03026919e-01,
                       -2.68486178e-01, -1.47245426e-01, -5.41379946e-01, -7.27999391e-01,
                       -3.75207725e-02, -1.44058680e+00, -1.16117652e+00,  5.68201184e-01,
                        5.08163712e-02,  1.11902515e-01,  8.86920379e-01,  4.99418111e-01,
                       -1.48839722e-01, -3.61772325e-02, -2.97263898e-01,  4.94654879e-01,
                       -6.32478266e-01,  5.63515676e-02,  1.91048517e-01,  7.25260028e-01,
                        3.75714435e-01,  5.82612449e-01, -6.40261374e-01, -1.32589452e+00,
                        5.23797607e-01, -3.55600726e-01,  4.57633735e-01, -1.30008266e-01,
                        4.92011373e-01,  6.49726166e-01, -4.12497032e-01,  1.66305782e+00,
                       -7.84263691e-01, -7.50191831e-02, -2.82536547e-01,  9.77878954e-02,
                       -8.76951809e-01,  9.06721330e-02, -3.66159831e-02,  1.29758889e+00,
                       -2.23747252e-01, -3.43399134e-01,  1.09170204e-01,  1.40505556e-02,
                        1.14392871e+00,  1.39062889e-01,  8.28874065e-04, -3.40094316e-01,
                        1.16377075e+00,  1.60273703e-01,  1.06793866e+00,  1.36358591e-01,
                       -1.21668436e-01, -9.24004606e-02, -6.96029709e-01,  7.63455927e-01,
                        5.38242429e-01,  1.15031413e+00, -1.63548693e-01, -5.89147388e-02,
                       -3.23008105e-01, -6.97439871e-01, -6.12100120e-01, -1.68078253e+00,
                       -4.98627578e-01,  1.01844798e+00,  6.28096588e-02,  9.68062582e-01,
                       -1.22622918e-01,  1.14519931e+00,  5.98794888e-01, -1.02654169e+00,
                       -1.15832511e+00, -4.94097705e-02,  5.05476698e-01, -2.16757310e-01,
                        2.64943343e-01, -3.53073342e-01, -2.51501415e-01,  2.50421740e-01,
                        3.27569622e-01,  5.93631160e-01,  1.07535561e+00, -1.77619828e-01,
                       -5.27919934e-01, -4.94415346e-01, -1.80494298e-01, -4.55706656e-01,
                        1.09265186e-01, -7.30372640e-01, -3.74684646e-01, -4.07975658e-01,
                        8.52516531e-01, -6.31882404e-01,  1.30327119e-01,  6.88272649e-01,
                       -4.39038315e-01,  1.62940079e-01,  1.95443276e-01, -2.21053706e-01,
                        5.26453285e-01,  6.00394049e-01,  3.36134319e-01, -7.46320605e-01,
                       -9.77896464e-01])

    # Convert to matrix representation
    return qf.shr2mat(omegar, N=N)


@pytest.mark.parametrize("N", [33, 65, 128, 513])
def test_laplace_direct(N):

    P = get_random_mat(N)
    P_cp = cp.array(P)

    W_direct = qudirect.laplace(P)
    W_cupy = qf.gpu.laplace_cp(P_cp)

    assert np.abs(W_cupy.get()-W_direct).max() < 1e-10

@pytest.mark.parametrize("N", [33, 65, 128, 513])
def test_laplace_tridiagonal(N):

    P = get_random_mat(N)
    P_cp = cp.array(P)

    W_direct = qutridiagonal.laplace(P)
    W_cupy = qf.gpu.laplace_cp(P_cp)

    assert np.abs(W_cupy.get()-W_direct).max() == 0